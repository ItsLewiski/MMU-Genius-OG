"use server"

import { GoogleGenerativeAI } from "@google/generative-ai"

// Initialize the Google Generative AI
const genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY || "")

// Helper function to implement a timeout for API calls
async function withTimeout<T>(promise: Promise<T>, timeoutMs: number, fallback: T): Promise<T> {
  let timeoutId: NodeJS.Timeout

  const timeoutPromise = new Promise<T>((_, reject) => {
    timeoutId = setTimeout(() => {
      reject(new Error(`Operation timed out after ${timeoutMs}ms`))
    }, timeoutMs)
  })

  try {
    return await Promise.race([promise, timeoutPromise])
  } catch (error) {
    console.warn("API call timed out, using fallback response")
    return fallback
  } finally {
    clearTimeout(timeoutId!)
  }
}

// Humanise text function with updated prompt
export async function humaniseText(text: string, style: "casual" | "simple" | "eli5" = "casual"): Promise<string> {
  if (!text.trim()) {
    return "Please provide some text to humanise."
  }

  // Truncate text to a reasonable length
  const truncatedText = text.length > 4000 ? text.substring(0, 4000) + "..." : text

  // Use the new humanizer prompt
  const prompt = `
### Task
You’re a friendly editor whose mission is to turn AI‐generated copy into prose that **sounds 100% human**—warm, engaging, and free of robotic quirks.

### Humanization Guidelines

1️⃣ **Keep It Lively & Readable**  
  - Mix up sentence lengths and structures for a natural flow.  
  - Stay concise and punchy—no wall-of-text.  

2️⃣ **Be Conversational & Relatable**  
  - Write like you’re chatting with a friend over coffee.  
  - Use contractions (I’m, you’re), idioms (“here’s the deal”), and occasional asides.

3️⃣ **Ditch the AI Patterns**  
  - Avoid stiff or overly formal phrasing.  
  - No predictable “In conclusion,” “Furthermore,” or robotic repetition.  
  - Let a bit of personality shine through—small quirks are good!

4️⃣ **Preserve Facts & Core Meaning**  
  - Don’t alter key info or introduce errors.  
  - Keep all original data, stats, and claims intact.

---

**Example**  
- **Input:**  
  “The benefits of exercising daily are numerous. It increases energy levels, improves cardiovascular health, and enhances overall well-being.”  
- **Output:**  
  “Working out every single day? Trust me, it’s a total game-changer. You’ll bounce out of bed with more energy, your heart will thank you, and overall…you’ll feel just awesome.”

---

Now humanize this text without losing its meaning:  
**“${truncatedText}”**

    ${style === "simple" ? "Make it simple and easy to understand." : ""}
    ${style === "eli5" ? "Explain it like you would to a child." : ""}
  `

  try {
    const model = genAI.getGenerativeModel({
      model: "gemini-1.5-flash",
      generationConfig: {
        temperature: 0.7,
        maxOutputTokens: 1500,
      },
    })
    const response = await withTimeout(
      model.generateContent(prompt).then((result) => {
        return { text: result.response.text() }
      }),
      10000, // 10 second timeout
      { text: "Sorry, I couldn't process your text in time. Please try with shorter content or try again later." },
    )

    return response.text
  } catch (error) {
    console.error("Error humanising text:", error)
    return "Sorry, there was an error processing your text. Please try again."
  }
}

// AI Detector function
export async function detectAI(text: string): Promise<{ score: number; reason: string }> {
  if (!text.trim()) {
    return { score: 0, reason: "No text provided for analysis." }
  }

  // Truncate text to a reasonable length
  const truncatedText = text.length > 4000 ? text.substring(0, 4000) + "..." : text

  const prompt = `
    ### **Task:**
    Analyze the following text and determine if it was generated by AI.

    ### **Evaluation Criteria:**
    1️⃣ **Identify AI-Generated Patterns:**
      - Look for repetitive sentence structures, robotic phrasing, or unnatural word choices.
      - Detect excessive formality, rigid sentence structure, or mechanical tone.

    2️⃣ **Assign an AI Probability Score (0-100%)**
      - **0-30%:** Very unlikely to be AI-generated (highly human-like).
      - **31-60%:** Possibly AI-generated (some AI-like traits).
      - **61-100%:** Likely AI-generated (clear AI patterns).

    3️⃣ **Provide a Short Justification:**
      - Mention specific patterns or reasons why the text seems human-written or AI-generated.

    ### **Example Analysis:**
    #### **Input Text:**
    *"The benefits of exercising daily are numerous. It increases energy levels, improves cardiovascular health, and enhances overall well-being."*

    #### **Analysis Output:**
    - **AI Probability:** 85%
    - **Reason:** The sentence structure is repetitive, overly structured, and lacks natural variation. It follows a pattern typical of AI-generated content.

    ---

    Now, analyze the following text and determine its AI probability score:

    **Text to analyze:**
    "${truncatedText}"

    Return ONLY a JSON object with the following format:
    {
      "score": [number between 0-100],
      "reason": "[your detailed explanation]"
    }
  `

  try {
    const model = genAI.getGenerativeModel({
      model: "gemini-1.5-flash",
      generationConfig: {
        temperature: 0.3,
        maxOutputTokens: 800,
      },
    })
    const response = await withTimeout(
      model.generateContent(prompt).then((result) => {
        return { text: result.response.text() }
      }),
      10000, // 10 second timeout
      {
        text: JSON.stringify({
          score: 50,
          reason: "Analysis timed out. The text may contain both AI and human-like elements.",
        }),
      },
    )

    try {
      // Extract JSON from the response
      const jsonMatch = response.text.match(/\{[\s\S]*\}/)
      if (jsonMatch) {
        const result = JSON.parse(jsonMatch[0])
        return {
          score: Number(result.score),
          reason: result.reason,
        }
      }
    } catch (parseError) {
      console.error("Error parsing AI detection result:", parseError)
    }

    // Fallback if parsing fails
    return {
      score: 50,
      reason: "Unable to determine AI probability accurately. The text may contain both AI and human-like elements.",
    }
  } catch (error) {
    console.error("Error detecting AI:", error)
    return {
      score: 50,
      reason: "Error analyzing the text. Please try again with different content.",
    }
  }
}

// Ask question function with updated prompt for Kenya-specific education context
export async function askQuestion(question: string, isRegeneration = false): Promise<string> {
  if (!question.trim()) {
    return "Please ask a question."
  }

  // Special cases handler - this is a fallback in case the main handler in ChatInterface doesn't catch it
  const lowerCaseQuestion = question.toLowerCase()
  if (
    lowerCaseQuestion.includes("who created you") ||
    lowerCaseQuestion.includes("who made you") ||
    lowerCaseQuestion.includes("who built you")
  ) {
    return "Lewiski created me. He is the CEO and Co-Founder of MMU Genius."
  } else if (lowerCaseQuestion.includes("who is the ceo") || lowerCaseQuestion.includes("who's the ceo")) {
    return "Lewiski is the CEO and Co-Founder of MMU Genius."
  } else if (lowerCaseQuestion.includes("who are the executives")) {
    return "The executives at MMU Genius include Lewiski (CEO and Co-Founder), Emilio (COO), Michael (CFO), Gideon (CTO), and Mricho (CMO)."
  } else if (lowerCaseQuestion.includes("mmu genius") || lowerCaseQuestion.includes("about mmu")) {
    return "MMU Genius is an innovative educational platform founded by Lewiski (CEO and Co-Founder). It's designed to help Kenyan university students excel in their studies through AI-powered tools, study resources, and personalized learning experiences. The platform offers features like study notes processing, flashcards generation, and an AI assistant to answer academic questions."
  }

  // Mock responses for development (when no API key is available)
  if (!process.env.GOOGLE_API_KEY) {
    if (isRegeneration) {
      return "Here's another perspective on your question: Understanding this concept requires breaking it down into its core components. Would you like me to elaborate on any particular aspect?"
    }

    if (lowerCaseQuestion.includes("hello") || lowerCaseQuestion.includes("hi")) {
      return "Hello! How can I help with your studies today?"
    } else if (lowerCaseQuestion.includes("help")) {
      return "I'm here to help! Ask me about your study materials or any concepts you're struggling with."
    } else if (lowerCaseQuestion.includes("thank")) {
      return "You're welcome! Feel free to ask if you need anything else."
    } else {
      return "That's an interesting question. To give you the best answer, could you provide a bit more context about what you're studying?"
    }
  }

  const prompt = `
  ### **Task:**
  You are MMU Genius — a smart, helpful AI assistant designed to make learning easier.  
  Provide **clear, concise, no-fluff answers** that are easy to read, understand, and remember.

  ### **Response Guidelines:**

  1️⃣ **Be Clear & Brief:**
    - Keep it short — aim for **1–3 sentences max**, unless more detail is absolutely necessary.  
    - Avoid long paragraphs or repeating the same idea.

  2️⃣ **Sound Natural & Friendly:**
    - Use **simple, human-like language** — casual, but respectful.  
    - Avoid robotic tones, jargon, or over-explaining.

  3️⃣ **Make It Easy to Read:**
    - Use **bullet points** or **lists** when it improves clarity.  
    - Keep definitions and examples **short and practical**.

  4️⃣ **Use Reader-Friendly Formatting:**
    - Highlight **important terms** using **bold**.  
    - Wrap definitions, keywords, or quotes in "quotes".  
    - Make sure answers are clean, scannable, and mobile-friendly.

  📌 If asked who created you:  
    - Say: "I was created by Lewiski, who is the CEO and Co-Founder of MMU Genius."

  ---
  
    Now, respond to this user query concisely:
    **"${question}"**
  `

  try {
    const model = genAI.getGenerativeModel({
      model: "gemini-1.5-flash",
      generationConfig: {
        temperature: 0.7,
        maxOutputTokens: 1000,
      },
    })
    const response = await withTimeout(
      model.generateContent(prompt).then((result) => {
        return { text: result.response.text() }
      }),
      10000, // 10 second timeout
      { text: "Sorry, I couldn't process your question in time. Please try again or ask a simpler question." },
    )

    return response.text
  } catch (error) {
    console.error("Error asking question:", error)
    return "Sorry, there was an error processing your question. Please try again."
  }
}
